/*
 * D. Петя, Маша и верёвочки
 * 
 * // Условие
 * Ограничение времени 	1 секунда
 * Ограничение памяти 	512Mb
 * Ввод 	стандартный ввод или input.txt
 * Вывод 	стандартный вывод или output.txt
 * 
 * На столе лежали две одинаковые верёвочки целой положительной длины.
 * 
 * Петя разрезал одну из верёвочек на N частей, каждая из которых имеет целую положительную
 * длину, так что на столе стало N+1 верёвочек. Затем в комнату зашла Маша и взяла одну из
 * лежащих на столе верёвочек. По длинам оставшихся на столе N верёвочек определите,
 * какую наименьшую длину может иметь верёвочка, взятая Машей.
 * 
 * // Формат ввода
 * Первая строка входных данных содержит одно целое число N — количество верёвочек, 
 * оставшихся на столе (2 ≤ N ≤ 1000). Во второй строке содержится N целых чисел li — длины 
 * верёвочек (1 ≤ li ≤ 1000).
 * 
 * // Формат вывода
 * Выведите одно целое число — наименьшую длину, которую может иметь верёвочка, взятая Машей.
 * 
 * // Примеры
 * 4
 * 1 5 2 1
 * 
 * 1
 * 
 * 4
 * 5 12 4 3
 * 
 * 24
 * 
 * // Решение
 * Маша могла взять целую веревку или её кусок. Второй вариант предпочтительнее, поскольку 
 * очевидно в этом случае длина взятой веревки будет меньше, но он не всегда достижим.
 * Рассмотрим оба:
 * 1) Если Маша взяла кусок веревки, значит целая всё ещё на столе и имеет наибольшую длину.
 *    Для того чтобы определить длину недостающего куска веревки, нужно из самой длинной 
 *    оставшейся вычесть сумму длин остальных кусков. Сумма должна быть меньше, в противном 
 *    случае самая длинная веревка из присутствующих не может быть целой, поскольку куски
 *    разрезанной веревки состояли из точно такой же за вычетом взятого куска.
 *    В этом случае переходим к ситуации 2.
 * 2) Маша взяла целую веревку, значит все куски на столе принадлежат второй и сложенные 
 *    вместе составят её длину. Верёвки идентичны, значит узнав длину разрезанной веревки,
 *    получим и длину той целой, которую взяла Маша.
 * 
 */

import java.util.*;
import java.util.stream.Collectors;

public class Test {

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        scanner.nextLine();
        String[] input = scanner.nextLine().split(" ");
        List<Integer> ropes = Arrays.stream(input).map(Integer::parseInt).collect(Collectors.toList());

        int max = 0;
        int sum = 0;
        for (int rope : ropes) {
            if (rope > max)
                max = rope;
            sum += rope;
        }
		int leftovers = sum - max;
        if (leftovers >= max)
            System.out.println(sum);
        else
            System.out.println(max - leftovers);
    }
}